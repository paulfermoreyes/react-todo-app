{"version":3,"sources":["components/Todo/Form.tsx","components/Todo/Todo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FormTodo","addTodo","React","useState","value","setValue","Form","onSubmit","e","preventDefault","InputGroup","className","Control","type","onChange","target","placeholder","Button","variant","Todo","todo","index","markTodo","removeTodo","style","width","Check","id","onClick","textDecoration","isDone","text","size","App","todos","setTodos","newTodos","splice","newTodo","map","Row","Col","Card","backgroundColor","Body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySA0BeA,MAtBf,YAAgD,IAA5BC,EAA2B,EAA3BA,QAChB,EAA0BC,IAAMC,SAAS,IAAzC,mBAAOC,EAAP,KAAcC,EAAd,KASA,OACI,cAACC,EAAA,EAAD,CAAMC,SARW,SAACC,GAClBA,EAAEC,iBACGL,IACLH,EAAQG,GACRC,EAAS,MAIT,SACI,eAACK,EAAA,EAAD,CAAYC,UAAU,OAAtB,UACI,cAACL,EAAA,EAAKM,QAAN,CAAcC,KAAK,OAAOF,UAAU,QAAQP,MAAOA,EAAOU,SAAU,SAAAN,GAAC,OAAIH,EAASG,EAAEO,OAAOX,QAAQY,YAAY,iBAC/G,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUL,KAAK,SAA/B,0BCMDM,MArBf,YAAkE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,WACnC,OACI,sBACIZ,UAAU,OADd,UAGI,qBAAKa,MAAO,CAACC,MAAO,QAApB,SACI,cAACnB,EAAA,EAAKoB,MAAN,CACIb,KAAK,WACLc,GAAE,gBACFC,QAAS,kBAAMN,EAASD,QAGhC,sBAAMG,MAAO,CAAEK,eAAgBT,EAAKU,OAAS,eAAiB,IAA9D,SAAqEV,EAAKW,OAC1E,8BAEI,cAACd,EAAA,EAAD,CAAQC,QAAQ,iBAAiBc,KAAK,KAAKJ,QAAS,kBAAML,EAAWF,IAArE,0BC+CDY,MAzDf,WACE,MAA0B/B,IAAMC,SAAS,CACvC,CACE4B,KAAM,wBACND,QAAQ,KAHZ,mBAAOI,EAAP,KAAcC,EAAd,KAgBMb,EAAW,SAACD,GAChB,IAAIe,EAAQ,YAAOF,GACnBE,EAASf,GAAOS,QAAUM,EAASf,GAAOS,OAE1CK,EAASC,IAGLb,EAAa,SAACF,GAClB,IAAMe,EAAQ,YAAOF,GACrBE,EAASC,OAAOhB,EAAO,GACvBc,EAASC,IAGX,OACE,qBAAKzB,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,mBAAd,uBACA,cAAC,EAAD,CAAUV,QA1BA,SAAC8B,GACf,IAAMO,EAAU,CACdP,KAAMA,EACND,QAAQ,GAEJM,EAAQ,sBAAOF,GAAP,CAAcI,IAC5BH,EAASC,MAqBJF,EAAMK,KAAI,SAACnB,EAAMC,GAAP,OACT,cAACmB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAMlB,MAAO,CAACmB,gBAAiBvB,EAAKU,OAAS,UAAY,QAAUnB,UAAU,eAA7E,SACE,cAAC+B,EAAA,EAAKE,KAAN,UACE,cAAC,EAAD,CAEEvB,MAAOA,EACPD,KAAMA,EACNE,SAAUA,EACVC,WAAYA,GAJPF,oBCnCVwB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cf3ed85e.chunk.js","sourcesContent":["import React, { FormEvent } from \"react\";\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\nimport { ITodoFormProps } from \"./types\";\n\nfunction FormTodo({ addTodo }: ITodoFormProps) {\n    const [value, setValue] = React.useState(\"\");\n\n    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (!value) return;\n        addTodo(value);\n        setValue(\"\");\n    };\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <InputGroup className=\"mb-5\">\n                <Form.Control type=\"text\" className=\"input\" value={value} onChange={e => setValue(e.target.value)} placeholder=\"Add new todo\" />\n                <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                </Button>\n            </InputGroup>\n        </Form>\n    );\n}\n\nexport default FormTodo;\n\n","import { Button, Form } from \"react-bootstrap\";\nimport { ITodoProps } from \"./types\";\n\nfunction Todo({ todo, index, markTodo, removeTodo }: ITodoProps) {\n    return (\n        <div\n            className=\"todo\"\n        >\n            <div style={{width: '18px'}}>\n                <Form.Check\n                    type=\"checkbox\"\n                    id={`todo-checkbox`}\n                    onClick={() => markTodo(index)}\n                />\n            </div>\n            <span style={{ textDecoration: todo.isDone ? \"line-through\" : \"\" }}>{todo.text}</span>\n            <div>\n                {/* <Button variant=\"outline-success\" onClick={() => markTodo(index)}>✓</Button>{' '} */}\n                <Button variant=\"outline-danger\" size=\"sm\" onClick={() => removeTodo(index)}>✕</Button>\n            </div>\n        </div>\n    );\n}\n\nexport default Todo;\n\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Card, Col, Row } from 'react-bootstrap';\nimport React from 'react';\nimport { IndexKind } from 'typescript';\nimport FormTodo from './components/Todo/Form';\nimport Todo from './components/Todo/Todo';\n\nfunction App() {\n  const [todos, setTodos] = React.useState([\n    {\n      text: \"This is a sample todo\",\n      isDone: false\n    }\n  ])\n\n  const addTodo = (text: string) => {\n    const newTodo = {\n      text: text,\n      isDone: false\n    }\n    const newTodos = [...todos, newTodo];\n    setTodos(newTodos);\n  }\n\n  const markTodo = (index: IndexKind) => {\n    var newTodos = [...todos];\n    newTodos[index].isDone = !newTodos[index].isDone;\n    // newTodos = newTodos.sort((todoA, todoB) => todoA.isDone === true && todoB.isDone === false ? 1 : -1)\n    setTodos(newTodos);\n  }\n\n  const removeTodo = (index: IndexKind) => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <h1 className=\"text-center mb-4\">Todo List</h1>\n        <FormTodo addTodo={addTodo} />\n        {todos.map((todo, index) => (\n          <Row>\n            <Col>\n              <Card style={{backgroundColor: todo.isDone ? \"#EFEFEF\" : \"#FFF\" }} className=\"mx-auto my-1\"> \n                <Card.Body>\n                  <Todo\n                    key={index}\n                    index={index}\n                    todo={todo}\n                    markTodo={markTodo}\n                    removeTodo={removeTodo}\n                  />\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}